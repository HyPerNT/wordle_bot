{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wordle_bot Index Auto-generated documentation index. A full list of Wordle_bot project modules. - [Bots](src/bots/index.md#bots) - [BayesianBot](src/bots/bayesian_bot.md#bayesianbot) - [BotBehaviors](src/bots/bot_behaviors.md#botbehaviors) - [ExampleBot](src/bots/example_bot.md#examplebot) - [Util](src/bots/util.md#util) - [Cli](src/cli/index.md#cli) - [Cli](src/cli/cli.md#cli) - [Util](src/cli/util.md#util) - [Common](src/common/index.md#common) - [Util](src/common/util.md#util) - [Tester](src/tester/index.md#tester) - [WordleTester](src/tester/wordle_tester.md#wordletester) - [Wordle](src/wordle/index.md#wordle) - [Wordle](src/wordle/wordle.md#wordle)","title":"Wordle_bot Index"},{"location":"#wordle_bot-index","text":"Auto-generated documentation index. A full list of Wordle_bot project modules. - [Bots](src/bots/index.md#bots) - [BayesianBot](src/bots/bayesian_bot.md#bayesianbot) - [BotBehaviors](src/bots/bot_behaviors.md#botbehaviors) - [ExampleBot](src/bots/example_bot.md#examplebot) - [Util](src/bots/util.md#util) - [Cli](src/cli/index.md#cli) - [Cli](src/cli/cli.md#cli) - [Util](src/cli/util.md#util) - [Common](src/common/index.md#common) - [Util](src/common/util.md#util) - [Tester](src/tester/index.md#tester) - [WordleTester](src/tester/wordle_tester.md#wordletester) - [Wordle](src/wordle/index.md#wordle) - [Wordle](src/wordle/wordle.md#wordle)","title":"Wordle_bot Index"},{"location":"src/bots/","text":"Bots Wordle_bot Index / src / Bots Auto-generated documentation for src.bots module. Bots Modules Modules BayesianBot BotBehaviors ExampleBot Util","title":"Bots"},{"location":"src/bots/#bots","text":"Wordle_bot Index / src / Bots Auto-generated documentation for src.bots module. Bots Modules","title":"Bots"},{"location":"src/bots/#modules","text":"BayesianBot BotBehaviors ExampleBot Util","title":"Modules"},{"location":"src/bots/bayesian_bot/","text":"BayesianBot Wordle_bot Index / src / Bots / BayesianBot Auto-generated documentation for src.bots.bayesian_bot module. BayesianBot BayesianBot BayesianBot().generate_first_guess BayesianBot().generate_next_guess BayesianBot().get_number_of_guesses BayesianBot().guess_most_probable_from_list BayesianBot().use_bayesian_strategy BayesianBot().use_greedy_strategy BayesianBot Show source in bayesian_bot.py:15 A class representing a Wordle bot that generates guesses based on letter frequency and previous results. It inherits from BotBehaviors and implements methods to generate the first guess and subsequent guesses based on the frequency of letters and the results of previous guesses. Attributes frequency_list : str A string representing the frequency of letters in the English language, ordered from most to least frequent. MAX_WORDS : int The maximum number of words to allow in the search space before BayesianBot switches away from the greedy strategy. BAYES_MIN_TURNS : int The minimum number of turns before BayesianBot uses the Bayesian strategy. unique_words_set : list[str] The word set of the 20 most common letters in English, as disjoint and legal Wordle words. GREEDY_MAX_TURNS : int The maximum number of turns the Greedy strategy will pbe played for, set to the size of the unique_words_set. Signature class BayesianBot(BotBehaviors): def __init__(self): ... BayesianBot().generate_first_guess Show source in bayesian_bot.py:46 Generate the first guess for the Wordle game. Parameters None Returns str The first guess word for the bot, which is hardcoded to \"CAGEY\". Signature def generate_first_guess(self) -> str: ... BayesianBot().generate_next_guess Show source in bayesian_bot.py:114 Generate the next guess for the Wordle game based on previous guesses and results. This method filters the list of possible words based on the last guess and its result, and then selects the next guess based on letter frequency and uniqueness. Uniqueness is prioritized to avoid repeated letters in the guess. Parameters None Returns str The next guess word for the bot, selected from the filtered list of possible words. Signature def generate_next_guess(self) -> str: ... BayesianBot().get_number_of_guesses Show source in bayesian_bot.py:91 Get number of guesses made. Returns int Number of guesses made in this game. Signature def get_number_of_guesses(self) -> int: ... BayesianBot().guess_most_probable_from_list Show source in bayesian_bot.py:61 Filter a given candidate word list based on a letter frequency list and returns first result. Parameters candidates : list[str] A candidate word list. frequency_list : str A string representing the order of letters to prioritize. Returns str The first word from the candidate list with optimum frequency. Signature def guess_most_probable_from_list( self, candidates: list[str], frequency_list: str ) -> str: ... BayesianBot().use_bayesian_strategy Show source in bayesian_bot.py:108 Use the Bayesian strategy. Signature def use_bayesian_strategy(self) -> bool: ... BayesianBot().use_greedy_strategy Show source in bayesian_bot.py:102 Use the greedy strategy. Signature def use_greedy_strategy(self) -> bool: ...","title":"BayesianBot"},{"location":"src/bots/bayesian_bot/#bayesianbot","text":"Wordle_bot Index / src / Bots / BayesianBot Auto-generated documentation for src.bots.bayesian_bot module. BayesianBot BayesianBot BayesianBot().generate_first_guess BayesianBot().generate_next_guess BayesianBot().get_number_of_guesses BayesianBot().guess_most_probable_from_list BayesianBot().use_bayesian_strategy BayesianBot().use_greedy_strategy","title":"BayesianBot"},{"location":"src/bots/bayesian_bot/#bayesianbot_1","text":"Show source in bayesian_bot.py:15 A class representing a Wordle bot that generates guesses based on letter frequency and previous results. It inherits from BotBehaviors and implements methods to generate the first guess and subsequent guesses based on the frequency of letters and the results of previous guesses.","title":"BayesianBot"},{"location":"src/bots/bayesian_bot/#attributes","text":"frequency_list : str A string representing the frequency of letters in the English language, ordered from most to least frequent. MAX_WORDS : int The maximum number of words to allow in the search space before BayesianBot switches away from the greedy strategy. BAYES_MIN_TURNS : int The minimum number of turns before BayesianBot uses the Bayesian strategy. unique_words_set : list[str] The word set of the 20 most common letters in English, as disjoint and legal Wordle words. GREEDY_MAX_TURNS : int The maximum number of turns the Greedy strategy will pbe played for, set to the size of the unique_words_set.","title":"Attributes"},{"location":"src/bots/bayesian_bot/#signature","text":"class BayesianBot(BotBehaviors): def __init__(self): ...","title":"Signature"},{"location":"src/bots/bayesian_bot/#bayesianbotgenerate_first_guess","text":"Show source in bayesian_bot.py:46 Generate the first guess for the Wordle game.","title":"BayesianBot().generate_first_guess"},{"location":"src/bots/bayesian_bot/#parameters","text":"None","title":"Parameters"},{"location":"src/bots/bayesian_bot/#returns","text":"str The first guess word for the bot, which is hardcoded to \"CAGEY\".","title":"Returns"},{"location":"src/bots/bayesian_bot/#signature_1","text":"def generate_first_guess(self) -> str: ...","title":"Signature"},{"location":"src/bots/bayesian_bot/#bayesianbotgenerate_next_guess","text":"Show source in bayesian_bot.py:114 Generate the next guess for the Wordle game based on previous guesses and results. This method filters the list of possible words based on the last guess and its result, and then selects the next guess based on letter frequency and uniqueness. Uniqueness is prioritized to avoid repeated letters in the guess.","title":"BayesianBot().generate_next_guess"},{"location":"src/bots/bayesian_bot/#parameters_1","text":"None","title":"Parameters"},{"location":"src/bots/bayesian_bot/#returns_1","text":"str The next guess word for the bot, selected from the filtered list of possible words.","title":"Returns"},{"location":"src/bots/bayesian_bot/#signature_2","text":"def generate_next_guess(self) -> str: ...","title":"Signature"},{"location":"src/bots/bayesian_bot/#bayesianbotget_number_of_guesses","text":"Show source in bayesian_bot.py:91 Get number of guesses made.","title":"BayesianBot().get_number_of_guesses"},{"location":"src/bots/bayesian_bot/#returns_2","text":"int Number of guesses made in this game.","title":"Returns"},{"location":"src/bots/bayesian_bot/#signature_3","text":"def get_number_of_guesses(self) -> int: ...","title":"Signature"},{"location":"src/bots/bayesian_bot/#bayesianbotguess_most_probable_from_list","text":"Show source in bayesian_bot.py:61 Filter a given candidate word list based on a letter frequency list and returns first result.","title":"BayesianBot().guess_most_probable_from_list"},{"location":"src/bots/bayesian_bot/#parameters_2","text":"candidates : list[str] A candidate word list. frequency_list : str A string representing the order of letters to prioritize.","title":"Parameters"},{"location":"src/bots/bayesian_bot/#returns_3","text":"str The first word from the candidate list with optimum frequency.","title":"Returns"},{"location":"src/bots/bayesian_bot/#signature_4","text":"def guess_most_probable_from_list( self, candidates: list[str], frequency_list: str ) -> str: ...","title":"Signature"},{"location":"src/bots/bayesian_bot/#bayesianbotuse_bayesian_strategy","text":"Show source in bayesian_bot.py:108 Use the Bayesian strategy.","title":"BayesianBot().use_bayesian_strategy"},{"location":"src/bots/bayesian_bot/#signature_5","text":"def use_bayesian_strategy(self) -> bool: ...","title":"Signature"},{"location":"src/bots/bayesian_bot/#bayesianbotuse_greedy_strategy","text":"Show source in bayesian_bot.py:102 Use the greedy strategy.","title":"BayesianBot().use_greedy_strategy"},{"location":"src/bots/bayesian_bot/#signature_6","text":"def use_greedy_strategy(self) -> bool: ...","title":"Signature"},{"location":"src/bots/bot/","text":"Bot Wordle_bot Index / src / Bots / Bot Auto-generated documentation for src.bots.bot module. Bot WordleBot WordleBot().generate_first_guess WordleBot().generate_next_guess WordleBot Show source in bot.py:15 A class representing a Wordle bot that generates guesses based on letter frequency and previous results. It inherits from BotBehaviors and implements methods to generate the first guess and subsequent guesses based on the frequency of letters and the results of previous guesses. Attributes frequency_list : str A string representing the frequency of letters in the English language, ordered from most to least frequent. MAX_LETTERS : int The maximum number of unique letters to try for in guessing. Signature class WordleBot(BotBehaviors): def __init__(self): ... WordleBot().generate_first_guess Show source in bot.py:37 Generate the first guess for the Wordle game. Parameters None Returns str The first guess word for the bot, which is hardcoded to \"GHOST\". Signature def generate_first_guess(self) -> str: ... WordleBot().generate_next_guess Show source in bot.py:52 Generate the next guess for the Wordle game based on previous guesses and results. This method filters the list of possible words based on the last guess and its result, and then selects the next guess based on letter frequency and uniqueness. Uniqueness is prioritized to avoid repeated letters in the guess. Parameters None Returns str The next guess word for the bot, selected from the filtered list of possible words. Signature def generate_next_guess(self) -> str: ...","title":"Bot"},{"location":"src/bots/bot/#bot","text":"Wordle_bot Index / src / Bots / Bot Auto-generated documentation for src.bots.bot module. Bot WordleBot WordleBot().generate_first_guess WordleBot().generate_next_guess","title":"Bot"},{"location":"src/bots/bot/#wordlebot","text":"Show source in bot.py:15 A class representing a Wordle bot that generates guesses based on letter frequency and previous results. It inherits from BotBehaviors and implements methods to generate the first guess and subsequent guesses based on the frequency of letters and the results of previous guesses.","title":"WordleBot"},{"location":"src/bots/bot/#attributes","text":"frequency_list : str A string representing the frequency of letters in the English language, ordered from most to least frequent. MAX_LETTERS : int The maximum number of unique letters to try for in guessing.","title":"Attributes"},{"location":"src/bots/bot/#signature","text":"class WordleBot(BotBehaviors): def __init__(self): ...","title":"Signature"},{"location":"src/bots/bot/#wordlebotgenerate_first_guess","text":"Show source in bot.py:37 Generate the first guess for the Wordle game.","title":"WordleBot().generate_first_guess"},{"location":"src/bots/bot/#parameters","text":"None","title":"Parameters"},{"location":"src/bots/bot/#returns","text":"str The first guess word for the bot, which is hardcoded to \"GHOST\".","title":"Returns"},{"location":"src/bots/bot/#signature_1","text":"def generate_first_guess(self) -> str: ...","title":"Signature"},{"location":"src/bots/bot/#wordlebotgenerate_next_guess","text":"Show source in bot.py:52 Generate the next guess for the Wordle game based on previous guesses and results. This method filters the list of possible words based on the last guess and its result, and then selects the next guess based on letter frequency and uniqueness. Uniqueness is prioritized to avoid repeated letters in the guess.","title":"WordleBot().generate_next_guess"},{"location":"src/bots/bot/#parameters_1","text":"None","title":"Parameters"},{"location":"src/bots/bot/#returns_1","text":"str The next guess word for the bot, selected from the filtered list of possible words.","title":"Returns"},{"location":"src/bots/bot/#signature_2","text":"def generate_next_guess(self) -> str: ...","title":"Signature"},{"location":"src/bots/bot_behaviors/","text":"BotBehaviors Wordle_bot Index / src / Bots / BotBehaviors Auto-generated documentation for src.bots.bot_behaviors module. BotBehaviors BotBehaviors BotBehaviors().accept_result BotBehaviors().generate_first_guess BotBehaviors().generate_guess BotBehaviors().generate_next_guess BotBehaviors().reset BotBehaviors Show source in bot_behaviors.py:16 A class representing the behaviors of a Wordle bot. It manages the bot's guesses and results, and provides methods to generate guesses and accept results from the game. Attributes logger : logging.Logger A logger instance for logging bot events and errors. filter : Filter An instance of Filter to manage the word list and filtering. guesses : dict A dictionary to store the bot's guesses and results. possible_words : list[str] A list of possible words that the bot can guess from. Signature class BotBehaviors: def __init__(self) -> None: ... BotBehaviors().accept_result Show source in bot_behaviors.py:102 Accept the result of a guess and updates the bot's state accordingly. This method processes the result of a guess, updates the guesses and results, and logs the received result. If the result indicates a win or loss, it resets the bot's state. Parameters result : dict A dictionary containing the result of the guess, with keys RESULT and MSG. RESULT is expected to be a list of numbers if the game is still ongoing, or None in a win/loss indication. MSG can contain additional messages or information about the result. Returns None Signature def accept_result(self, result: dict): ... BotBehaviors().generate_first_guess Show source in bot_behaviors.py:56 Code to generate the first guess. This method should be overridden by subclasses to provide specific first guess logic. Returns str The first guess word for the bot. Signature def generate_first_guess(self: ignore[empty - body]) -> str: ... BotBehaviors().generate_guess Show source in bot_behaviors.py:82 Generate a guess for the bot based on the current state of guesses. If there are no previous guesses, it generates the first guess. Otherwise, it generates the next guess based on the previous guesses and results. Returns str The generated guess word for the bot. Signature def generate_guess(self) -> str: ... BotBehaviors().generate_next_guess Show source in bot_behaviors.py:69 Code to generate the next guess. This method should be overridden by subclasses to provide specific next guess logic. This should take into account the previous guesses and results Returns str The next guess word for the bot. Signature def generate_next_guess(self: ignore[empty - body]) -> str: ... BotBehaviors().reset Show source in bot_behaviors.py:46 Reset the bot's guesses and results. Initialize the guesses dictionary and sets the possible words to the complete word list. Signature def reset(self) -> None: ...","title":"BotBehaviors"},{"location":"src/bots/bot_behaviors/#botbehaviors","text":"Wordle_bot Index / src / Bots / BotBehaviors Auto-generated documentation for src.bots.bot_behaviors module. BotBehaviors BotBehaviors BotBehaviors().accept_result BotBehaviors().generate_first_guess BotBehaviors().generate_guess BotBehaviors().generate_next_guess BotBehaviors().reset","title":"BotBehaviors"},{"location":"src/bots/bot_behaviors/#botbehaviors_1","text":"Show source in bot_behaviors.py:16 A class representing the behaviors of a Wordle bot. It manages the bot's guesses and results, and provides methods to generate guesses and accept results from the game.","title":"BotBehaviors"},{"location":"src/bots/bot_behaviors/#attributes","text":"logger : logging.Logger A logger instance for logging bot events and errors. filter : Filter An instance of Filter to manage the word list and filtering. guesses : dict A dictionary to store the bot's guesses and results. possible_words : list[str] A list of possible words that the bot can guess from.","title":"Attributes"},{"location":"src/bots/bot_behaviors/#signature","text":"class BotBehaviors: def __init__(self) -> None: ...","title":"Signature"},{"location":"src/bots/bot_behaviors/#botbehaviorsaccept_result","text":"Show source in bot_behaviors.py:102 Accept the result of a guess and updates the bot's state accordingly. This method processes the result of a guess, updates the guesses and results, and logs the received result. If the result indicates a win or loss, it resets the bot's state.","title":"BotBehaviors().accept_result"},{"location":"src/bots/bot_behaviors/#parameters","text":"result : dict A dictionary containing the result of the guess, with keys RESULT and MSG. RESULT is expected to be a list of numbers if the game is still ongoing, or None in a win/loss indication. MSG can contain additional messages or information about the result.","title":"Parameters"},{"location":"src/bots/bot_behaviors/#returns","text":"None","title":"Returns"},{"location":"src/bots/bot_behaviors/#signature_1","text":"def accept_result(self, result: dict): ...","title":"Signature"},{"location":"src/bots/bot_behaviors/#botbehaviorsgenerate_first_guess","text":"Show source in bot_behaviors.py:56 Code to generate the first guess. This method should be overridden by subclasses to provide specific first guess logic.","title":"BotBehaviors().generate_first_guess"},{"location":"src/bots/bot_behaviors/#returns_1","text":"str The first guess word for the bot.","title":"Returns"},{"location":"src/bots/bot_behaviors/#signature_2","text":"def generate_first_guess(self: ignore[empty - body]) -> str: ...","title":"Signature"},{"location":"src/bots/bot_behaviors/#botbehaviorsgenerate_guess","text":"Show source in bot_behaviors.py:82 Generate a guess for the bot based on the current state of guesses. If there are no previous guesses, it generates the first guess. Otherwise, it generates the next guess based on the previous guesses and results.","title":"BotBehaviors().generate_guess"},{"location":"src/bots/bot_behaviors/#returns_2","text":"str The generated guess word for the bot.","title":"Returns"},{"location":"src/bots/bot_behaviors/#signature_3","text":"def generate_guess(self) -> str: ...","title":"Signature"},{"location":"src/bots/bot_behaviors/#botbehaviorsgenerate_next_guess","text":"Show source in bot_behaviors.py:69 Code to generate the next guess. This method should be overridden by subclasses to provide specific next guess logic. This should take into account the previous guesses and results Returns str The next guess word for the bot.","title":"BotBehaviors().generate_next_guess"},{"location":"src/bots/bot_behaviors/#signature_4","text":"def generate_next_guess(self: ignore[empty - body]) -> str: ...","title":"Signature"},{"location":"src/bots/bot_behaviors/#botbehaviorsreset","text":"Show source in bot_behaviors.py:46 Reset the bot's guesses and results. Initialize the guesses dictionary and sets the possible words to the complete word list.","title":"BotBehaviors().reset"},{"location":"src/bots/bot_behaviors/#signature_5","text":"def reset(self) -> None: ...","title":"Signature"},{"location":"src/bots/example_bot/","text":"ExampleBot Wordle_bot Index / src / Bots / ExampleBot Auto-generated documentation for src.bots.example_bot module. ExampleBot ExampleBot ExampleBot().generate_first_guess ExampleBot().generate_next_guess ExampleBot Show source in example_bot.py:15 A class representing a simple Wordle bot that generates guesses based on a predefined list of unique words. It inherits from BotBehaviors and implements methods to generate the first guess and subsequent guesses based on the index of previous guesses. Attributes filter : BotBehaviors An instance of BotBehaviors that provides methods for filtering and generating guesses. Signature class ExampleBot(BotBehaviors): def __init__(self): ... ExampleBot().generate_first_guess Show source in example_bot.py:33 Generate the first guess for the Wordle game. Returns str The first guess word for the bot, which is the first unique word in the list. Signature def generate_first_guess(self) -> str: ... ExampleBot().generate_next_guess Show source in example_bot.py:44 Generate the next guess for the Wordle game based on the number of previous guesses. This method selects the next guess from the list of unique words based on the index of previous guesses. Returns str The next guess word for the bot, selected from the list of unique words. Signature def generate_next_guess(self) -> str: ...","title":"ExampleBot"},{"location":"src/bots/example_bot/#examplebot","text":"Wordle_bot Index / src / Bots / ExampleBot Auto-generated documentation for src.bots.example_bot module. ExampleBot ExampleBot ExampleBot().generate_first_guess ExampleBot().generate_next_guess","title":"ExampleBot"},{"location":"src/bots/example_bot/#examplebot_1","text":"Show source in example_bot.py:15 A class representing a simple Wordle bot that generates guesses based on a predefined list of unique words. It inherits from BotBehaviors and implements methods to generate the first guess and subsequent guesses based on the index of previous guesses.","title":"ExampleBot"},{"location":"src/bots/example_bot/#attributes","text":"filter : BotBehaviors An instance of BotBehaviors that provides methods for filtering and generating guesses.","title":"Attributes"},{"location":"src/bots/example_bot/#signature","text":"class ExampleBot(BotBehaviors): def __init__(self): ...","title":"Signature"},{"location":"src/bots/example_bot/#examplebotgenerate_first_guess","text":"Show source in example_bot.py:33 Generate the first guess for the Wordle game.","title":"ExampleBot().generate_first_guess"},{"location":"src/bots/example_bot/#returns","text":"str The first guess word for the bot, which is the first unique word in the list.","title":"Returns"},{"location":"src/bots/example_bot/#signature_1","text":"def generate_first_guess(self) -> str: ...","title":"Signature"},{"location":"src/bots/example_bot/#examplebotgenerate_next_guess","text":"Show source in example_bot.py:44 Generate the next guess for the Wordle game based on the number of previous guesses. This method selects the next guess from the list of unique words based on the index of previous guesses.","title":"ExampleBot().generate_next_guess"},{"location":"src/bots/example_bot/#returns_1","text":"str The next guess word for the bot, selected from the list of unique words.","title":"Returns"},{"location":"src/bots/example_bot/#signature_2","text":"def generate_next_guess(self) -> str: ...","title":"Signature"},{"location":"src/bots/util/","text":"Util Wordle_bot Index / src / Bots / Util Auto-generated documentation for src.bots.util module. Util Filter Filter().filter_compatible_with_guess Filter().filter_compatible_with_past_guesses Filter().filter_containing_letter Filter().filter_containing_letter_at Filter().filter_not_containing_letter Filter().filter_not_containing_letter_at Filter().filter_unique_letters Filter().get_letter_count Filter().get_sorted_letters Filter().has_all_unique_letters Filter().is_letter_possible Filter().is_valid_word Filter Show source in util.py:25 A class that provides various filtering methods for word lists used in Wordle games. It includes methods to check for unique letters, filter words based on letter presence, and filter words based on previous guesses and results. Attributes logger : logging.Logger A logger instance for logging filtering events and errors. word_list : list[str] A list of valid words that can be used in the game. all_unique_words : list[str] A list of words that contain all unique letters, derived from the word list. Signature class Filter: def __init__(self) -> None: ... Filter().filter_compatible_with_guess Show source in util.py:189 Filter a list of words based on a guess and the result of that guess. The result is expected to be a dictionary with a key 'result' that contains a list of responses corresponding to each letter in the guess. The responses can be: - CORRECT_LETTER: The letter is in the correct position. - MISPLACED_LETTER: The letter is in the word but in the wrong position. - INCORRECT_LETTER: The letter is not in the word at all Parameters words : list[str] A list of words to filter based on the guess and result. guess : str The guessed word to compare against the words in the list. result : dict A dictionary containing the result of the guess, with a key 'result' that holds a list of responses for each letter in the guess. Returns list[str] A list of words that are compatible with the guess and result. Signature def filter_compatible_with_guess( self, words: list[str], guess: str, result: dict ) -> list[str]: ... Filter().filter_compatible_with_past_guesses Show source in util.py:236 Filter a list of words based on multiple past guesses and their results. This method iterates through all past guesses and their corresponding results, filtering the list of words to retain only those that are compatible with all guesses. Parameters words : list[str] A list of words to filter based on the past guesses and results. guesses : dict A dictionary containing past guesses and their results, with keys 'words' and 'results'. 'words' is a list of guessed words, and 'results' is a list of dictionaries containing the result for each guess. Returns list[str] A list of words that are compatible with all past guesses and results. Signature def filter_compatible_with_past_guesses( self, words: list[str], guesses: dict ) -> list[str]: ... Filter().filter_containing_letter Show source in util.py:109 Filter a list of words to include only those that contain a specific letter. Parameters words : list[str] A list of words to filter. letter : str The letter to check for in the words. Returns list[str] A list of words that contain the specified letter. Signature def filter_containing_letter(self, words: list[str], letter: str) -> list[str]: ... Filter().filter_containing_letter_at Show source in util.py:145 Filter a list of words to include only those that contain a specific letter at a specific index. Parameters words : list[str] A list of words to filter. letter : str The letter to check for in the words. index : int The index at which the letter should be present in the words. Returns list[str] A list of words that contain the specified letter at the specified index. Signature def filter_containing_letter_at( self, words: list[str], letter: str, index: int ) -> list[str]: ... Filter().filter_not_containing_letter Show source in util.py:127 Filter a list of words to exclude those that contain a specific letter. Parameters words : list[str] A list of words to filter. letter : str The letter to check for in the words. Returns list[str] A list of words that do not contain the specified letter. Signature def filter_not_containing_letter(self, words: list[str], letter: str) -> list[str]: ... Filter().filter_not_containing_letter_at Show source in util.py:167 Filter a list of words to exclude those that contain a specific letter at a specific index. Parameters words : list[str] A list of words to filter. letter : str The letter to check for in the words. index : int The index at which the letter should not be present in the words. Returns list[str] A list of words that do not contain the specified letter at the specified index. Signature def filter_not_containing_letter_at( self, words: list[str], letter: str, index: int ) -> list[str]: ... Filter().filter_unique_letters Show source in util.py:263 Filter a list of words to include only those that have all unique letters. Parameters words : list[str] A list of words to filter. Returns list[str] A list of words that contain all unique letters. Signature def filter_unique_letters(self, words: list[str]) -> list[str]: ... Filter().get_letter_count Show source in util.py:279 Generate a dictionary of letters to integers that represents the count of each letter in the given word list. Parameters words: list[str] A list of words to count. Returns dict[str, int] A dictionary keyed by letter to counts. Signature def get_letter_count(self, words: list[str]) -> dict[str, int]: ... Filter().get_sorted_letters Show source in util.py:301 Return a string that represents the ordering of letters from most to least common. Parameters totals_dict : dict[str, int] Dictionary of letter-count pairs. Returns str String representing letters sorted from most to least common. Signature def get_sorted_letters(self, totals_dict: dict[str, int]) -> str: ... Filter().has_all_unique_letters Show source in util.py:54 Check if a word contains all unique letters. A word is considered to have all unique letters if no letter appears more than once. Parameters word : str The word to check for unique letters. Returns bool True if the word has all unique letters, False otherwise. Signature def has_all_unique_letters(self, word: str) -> bool: ... Filter().is_letter_possible Show source in util.py:75 Check if a letter is present in any of the words in the list. Parameters words : list[str] A list of words to check. letter : str The letter to check for presence in the words. Returns bool True if the letter is present in any of the words, False otherwise. Signature def is_letter_possible(self, words: list[str], letter: str) -> bool: ... Filter().is_valid_word Show source in util.py:93 Check if a word is valid by verifying its presence in the word list. Parameters word : str The word to check for validity. Returns bool True if the word is in the word list, False otherwise. Signature def is_valid_word(self, word: str) -> bool: ...","title":"Util"},{"location":"src/bots/util/#util","text":"Wordle_bot Index / src / Bots / Util Auto-generated documentation for src.bots.util module. Util Filter Filter().filter_compatible_with_guess Filter().filter_compatible_with_past_guesses Filter().filter_containing_letter Filter().filter_containing_letter_at Filter().filter_not_containing_letter Filter().filter_not_containing_letter_at Filter().filter_unique_letters Filter().get_letter_count Filter().get_sorted_letters Filter().has_all_unique_letters Filter().is_letter_possible Filter().is_valid_word","title":"Util"},{"location":"src/bots/util/#filter","text":"Show source in util.py:25 A class that provides various filtering methods for word lists used in Wordle games. It includes methods to check for unique letters, filter words based on letter presence, and filter words based on previous guesses and results.","title":"Filter"},{"location":"src/bots/util/#attributes","text":"logger : logging.Logger A logger instance for logging filtering events and errors. word_list : list[str] A list of valid words that can be used in the game. all_unique_words : list[str] A list of words that contain all unique letters, derived from the word list.","title":"Attributes"},{"location":"src/bots/util/#signature","text":"class Filter: def __init__(self) -> None: ...","title":"Signature"},{"location":"src/bots/util/#filterfilter_compatible_with_guess","text":"Show source in util.py:189 Filter a list of words based on a guess and the result of that guess. The result is expected to be a dictionary with a key 'result' that contains a list of responses corresponding to each letter in the guess. The responses can be: - CORRECT_LETTER: The letter is in the correct position. - MISPLACED_LETTER: The letter is in the word but in the wrong position. - INCORRECT_LETTER: The letter is not in the word at all","title":"Filter().filter_compatible_with_guess"},{"location":"src/bots/util/#parameters","text":"words : list[str] A list of words to filter based on the guess and result. guess : str The guessed word to compare against the words in the list. result : dict A dictionary containing the result of the guess, with a key 'result' that holds a list of responses for each letter in the guess.","title":"Parameters"},{"location":"src/bots/util/#returns","text":"list[str] A list of words that are compatible with the guess and result.","title":"Returns"},{"location":"src/bots/util/#signature_1","text":"def filter_compatible_with_guess( self, words: list[str], guess: str, result: dict ) -> list[str]: ...","title":"Signature"},{"location":"src/bots/util/#filterfilter_compatible_with_past_guesses","text":"Show source in util.py:236 Filter a list of words based on multiple past guesses and their results. This method iterates through all past guesses and their corresponding results, filtering the list of words to retain only those that are compatible with all guesses.","title":"Filter().filter_compatible_with_past_guesses"},{"location":"src/bots/util/#parameters_1","text":"words : list[str] A list of words to filter based on the past guesses and results. guesses : dict A dictionary containing past guesses and their results, with keys 'words' and 'results'. 'words' is a list of guessed words, and 'results' is a list of dictionaries containing the result for each guess.","title":"Parameters"},{"location":"src/bots/util/#returns_1","text":"list[str] A list of words that are compatible with all past guesses and results.","title":"Returns"},{"location":"src/bots/util/#signature_2","text":"def filter_compatible_with_past_guesses( self, words: list[str], guesses: dict ) -> list[str]: ...","title":"Signature"},{"location":"src/bots/util/#filterfilter_containing_letter","text":"Show source in util.py:109 Filter a list of words to include only those that contain a specific letter.","title":"Filter().filter_containing_letter"},{"location":"src/bots/util/#parameters_2","text":"words : list[str] A list of words to filter. letter : str The letter to check for in the words.","title":"Parameters"},{"location":"src/bots/util/#returns_2","text":"list[str] A list of words that contain the specified letter.","title":"Returns"},{"location":"src/bots/util/#signature_3","text":"def filter_containing_letter(self, words: list[str], letter: str) -> list[str]: ...","title":"Signature"},{"location":"src/bots/util/#filterfilter_containing_letter_at","text":"Show source in util.py:145 Filter a list of words to include only those that contain a specific letter at a specific index.","title":"Filter().filter_containing_letter_at"},{"location":"src/bots/util/#parameters_3","text":"words : list[str] A list of words to filter. letter : str The letter to check for in the words. index : int The index at which the letter should be present in the words.","title":"Parameters"},{"location":"src/bots/util/#returns_3","text":"list[str] A list of words that contain the specified letter at the specified index.","title":"Returns"},{"location":"src/bots/util/#signature_4","text":"def filter_containing_letter_at( self, words: list[str], letter: str, index: int ) -> list[str]: ...","title":"Signature"},{"location":"src/bots/util/#filterfilter_not_containing_letter","text":"Show source in util.py:127 Filter a list of words to exclude those that contain a specific letter.","title":"Filter().filter_not_containing_letter"},{"location":"src/bots/util/#parameters_4","text":"words : list[str] A list of words to filter. letter : str The letter to check for in the words.","title":"Parameters"},{"location":"src/bots/util/#returns_4","text":"list[str] A list of words that do not contain the specified letter.","title":"Returns"},{"location":"src/bots/util/#signature_5","text":"def filter_not_containing_letter(self, words: list[str], letter: str) -> list[str]: ...","title":"Signature"},{"location":"src/bots/util/#filterfilter_not_containing_letter_at","text":"Show source in util.py:167 Filter a list of words to exclude those that contain a specific letter at a specific index.","title":"Filter().filter_not_containing_letter_at"},{"location":"src/bots/util/#parameters_5","text":"words : list[str] A list of words to filter. letter : str The letter to check for in the words. index : int The index at which the letter should not be present in the words.","title":"Parameters"},{"location":"src/bots/util/#returns_5","text":"list[str] A list of words that do not contain the specified letter at the specified index.","title":"Returns"},{"location":"src/bots/util/#signature_6","text":"def filter_not_containing_letter_at( self, words: list[str], letter: str, index: int ) -> list[str]: ...","title":"Signature"},{"location":"src/bots/util/#filterfilter_unique_letters","text":"Show source in util.py:263 Filter a list of words to include only those that have all unique letters.","title":"Filter().filter_unique_letters"},{"location":"src/bots/util/#parameters_6","text":"words : list[str] A list of words to filter.","title":"Parameters"},{"location":"src/bots/util/#returns_6","text":"list[str] A list of words that contain all unique letters.","title":"Returns"},{"location":"src/bots/util/#signature_7","text":"def filter_unique_letters(self, words: list[str]) -> list[str]: ...","title":"Signature"},{"location":"src/bots/util/#filterget_letter_count","text":"Show source in util.py:279 Generate a dictionary of letters to integers that represents the count of each letter in the given word list.","title":"Filter().get_letter_count"},{"location":"src/bots/util/#parameters_7","text":"words: list[str] A list of words to count.","title":"Parameters"},{"location":"src/bots/util/#returns_7","text":"dict[str, int] A dictionary keyed by letter to counts.","title":"Returns"},{"location":"src/bots/util/#signature_8","text":"def get_letter_count(self, words: list[str]) -> dict[str, int]: ...","title":"Signature"},{"location":"src/bots/util/#filterget_sorted_letters","text":"Show source in util.py:301 Return a string that represents the ordering of letters from most to least common.","title":"Filter().get_sorted_letters"},{"location":"src/bots/util/#parameters_8","text":"totals_dict : dict[str, int] Dictionary of letter-count pairs.","title":"Parameters"},{"location":"src/bots/util/#returns_8","text":"str String representing letters sorted from most to least common.","title":"Returns"},{"location":"src/bots/util/#signature_9","text":"def get_sorted_letters(self, totals_dict: dict[str, int]) -> str: ...","title":"Signature"},{"location":"src/bots/util/#filterhas_all_unique_letters","text":"Show source in util.py:54 Check if a word contains all unique letters. A word is considered to have all unique letters if no letter appears more than once.","title":"Filter().has_all_unique_letters"},{"location":"src/bots/util/#parameters_9","text":"word : str The word to check for unique letters.","title":"Parameters"},{"location":"src/bots/util/#returns_9","text":"bool True if the word has all unique letters, False otherwise.","title":"Returns"},{"location":"src/bots/util/#signature_10","text":"def has_all_unique_letters(self, word: str) -> bool: ...","title":"Signature"},{"location":"src/bots/util/#filteris_letter_possible","text":"Show source in util.py:75 Check if a letter is present in any of the words in the list.","title":"Filter().is_letter_possible"},{"location":"src/bots/util/#parameters_10","text":"words : list[str] A list of words to check. letter : str The letter to check for presence in the words.","title":"Parameters"},{"location":"src/bots/util/#returns_10","text":"bool True if the letter is present in any of the words, False otherwise.","title":"Returns"},{"location":"src/bots/util/#signature_11","text":"def is_letter_possible(self, words: list[str], letter: str) -> bool: ...","title":"Signature"},{"location":"src/bots/util/#filteris_valid_word","text":"Show source in util.py:93 Check if a word is valid by verifying its presence in the word list.","title":"Filter().is_valid_word"},{"location":"src/bots/util/#parameters_11","text":"word : str The word to check for validity.","title":"Parameters"},{"location":"src/bots/util/#returns_11","text":"bool True if the word is in the word list, False otherwise.","title":"Returns"},{"location":"src/bots/util/#signature_12","text":"def is_valid_word(self, word: str) -> bool: ...","title":"Signature"},{"location":"src/cli/","text":"Cli Wordle_bot Index / src / Cli Auto-generated documentation for src.cli module. Cli Modules Modules Cli Util","title":"Cli"},{"location":"src/cli/#cli","text":"Wordle_bot Index / src / Cli Auto-generated documentation for src.cli module. Cli Modules","title":"Cli"},{"location":"src/cli/#modules","text":"Cli Util","title":"Modules"},{"location":"src/cli/cli/","text":"Cli Wordle_bot Index / src / Cli / Cli Auto-generated documentation for src.cli.cli module. Cli Cli Cli().accept_guess Cli().accept_result Cli().game_in_progress Cli().get_valid_word Cli().init_bot Cli().init_session Cli().play Cli().play_automatically Cli().play_interactively Cli().provide_guess Cli Show source in cli.py:24 Command-line interface for Wordle bots. This class manages user interaction for playing Wordle with different bot behaviors. It handles bot selection, game flow, user guesses, and result input. Signature class Cli: def __init__(self): ... Cli().accept_guess Show source in cli.py:130 Accept a guess from the user, validate, and update bot state. Signature def accept_guess(self): ... Cli().accept_result Show source in cli.py:147 Prompt user for result of guess and update bot state. Signature def accept_result(self): ... Cli().game_in_progress Show source in cli.py:38 Determine whether a game is in progress. Returns bool False if the game is over, True otherwise Signature def game_in_progress(self) -> bool: ... Cli().get_valid_word Show source in cli.py:135 Accept a word from the user, testing if it is valid before returning. Signature def get_valid_word(self) -> str: ... Cli().init_bot Show source in cli.py:53 Prompt user for bot to use and set class instance to that selection. Signature def init_bot(self) -> None: ... Cli().init_session Show source in cli.py:115 Initialize a new game session. Signature def init_session(self) -> None: ... Cli().play Show source in cli.py:79 Play a game with the user, repeatedly prompting for new games or new bots. Signature def play(self) -> None: ... Cli().play_automatically Show source in cli.py:68 Play a game a automatically with the user, prompting for a secret word and running the game. Signature def play_automatically(self) -> None: ... Cli().play_interactively Show source in cli.py:59 Play a game interactively with the user, prompting for guesses and results. Signature def play_interactively(self) -> None: ... Cli().provide_guess Show source in cli.py:120 Provide the bot's next guess to the user. Signature def provide_guess(self): ...","title":"Cli"},{"location":"src/cli/cli/#cli","text":"Wordle_bot Index / src / Cli / Cli Auto-generated documentation for src.cli.cli module. Cli Cli Cli().accept_guess Cli().accept_result Cli().game_in_progress Cli().get_valid_word Cli().init_bot Cli().init_session Cli().play Cli().play_automatically Cli().play_interactively Cli().provide_guess","title":"Cli"},{"location":"src/cli/cli/#cli_1","text":"Show source in cli.py:24 Command-line interface for Wordle bots. This class manages user interaction for playing Wordle with different bot behaviors. It handles bot selection, game flow, user guesses, and result input.","title":"Cli"},{"location":"src/cli/cli/#signature","text":"class Cli: def __init__(self): ...","title":"Signature"},{"location":"src/cli/cli/#cliaccept_guess","text":"Show source in cli.py:130 Accept a guess from the user, validate, and update bot state.","title":"Cli().accept_guess"},{"location":"src/cli/cli/#signature_1","text":"def accept_guess(self): ...","title":"Signature"},{"location":"src/cli/cli/#cliaccept_result","text":"Show source in cli.py:147 Prompt user for result of guess and update bot state.","title":"Cli().accept_result"},{"location":"src/cli/cli/#signature_2","text":"def accept_result(self): ...","title":"Signature"},{"location":"src/cli/cli/#cligame_in_progress","text":"Show source in cli.py:38 Determine whether a game is in progress.","title":"Cli().game_in_progress"},{"location":"src/cli/cli/#returns","text":"bool False if the game is over, True otherwise","title":"Returns"},{"location":"src/cli/cli/#signature_3","text":"def game_in_progress(self) -> bool: ...","title":"Signature"},{"location":"src/cli/cli/#cliget_valid_word","text":"Show source in cli.py:135 Accept a word from the user, testing if it is valid before returning.","title":"Cli().get_valid_word"},{"location":"src/cli/cli/#signature_4","text":"def get_valid_word(self) -> str: ...","title":"Signature"},{"location":"src/cli/cli/#cliinit_bot","text":"Show source in cli.py:53 Prompt user for bot to use and set class instance to that selection.","title":"Cli().init_bot"},{"location":"src/cli/cli/#signature_5","text":"def init_bot(self) -> None: ...","title":"Signature"},{"location":"src/cli/cli/#cliinit_session","text":"Show source in cli.py:115 Initialize a new game session.","title":"Cli().init_session"},{"location":"src/cli/cli/#signature_6","text":"def init_session(self) -> None: ...","title":"Signature"},{"location":"src/cli/cli/#cliplay","text":"Show source in cli.py:79 Play a game with the user, repeatedly prompting for new games or new bots.","title":"Cli().play"},{"location":"src/cli/cli/#signature_7","text":"def play(self) -> None: ...","title":"Signature"},{"location":"src/cli/cli/#cliplay_automatically","text":"Show source in cli.py:68 Play a game a automatically with the user, prompting for a secret word and running the game.","title":"Cli().play_automatically"},{"location":"src/cli/cli/#signature_8","text":"def play_automatically(self) -> None: ...","title":"Signature"},{"location":"src/cli/cli/#cliplay_interactively","text":"Show source in cli.py:59 Play a game interactively with the user, prompting for guesses and results.","title":"Cli().play_interactively"},{"location":"src/cli/cli/#signature_9","text":"def play_interactively(self) -> None: ...","title":"Signature"},{"location":"src/cli/cli/#cliprovide_guess","text":"Show source in cli.py:120 Provide the bot's next guess to the user.","title":"Cli().provide_guess"},{"location":"src/cli/cli/#signature_10","text":"def provide_guess(self): ...","title":"Signature"},{"location":"src/cli/util/","text":"Util Wordle_bot Index / src / Cli / Util Auto-generated documentation for src.cli.util module. Util get_bot_selection get_choice_from_prompt get_bot_selection Show source in util.py:12 Get the desired bot of many implementations from the user. Parameters bots : list[BotBehaviors] A list of bots available Returns int The index of the bot selected Signature def get_bot_selection(bots: list[type[BotBehaviors]]) -> int: ... get_choice_from_prompt Show source in util.py:32 Prompt the user with a question and a list of options, returning their choice. Additionally provides some input checking to ensure the selection is valid. Parameters prompt : str The prompt message, which should be descriptive. options : list[str] A list of strings that correspond with the selections available. The first element is always the default, which is accepted if the user immediately presses the return key. has_default : bool, optional Whether the first option should be accepted by default, defaults to True Returns int The choice, 0-indexed Raises ValueError Only when the user provides an illegal option Signature def get_choice_from_prompt(prompt: str, options: list[str], has_default=True) -> int: ...","title":"Util"},{"location":"src/cli/util/#util","text":"Wordle_bot Index / src / Cli / Util Auto-generated documentation for src.cli.util module. Util get_bot_selection get_choice_from_prompt","title":"Util"},{"location":"src/cli/util/#get_bot_selection","text":"Show source in util.py:12 Get the desired bot of many implementations from the user.","title":"get_bot_selection"},{"location":"src/cli/util/#parameters","text":"bots : list[BotBehaviors] A list of bots available","title":"Parameters"},{"location":"src/cli/util/#returns","text":"int The index of the bot selected","title":"Returns"},{"location":"src/cli/util/#signature","text":"def get_bot_selection(bots: list[type[BotBehaviors]]) -> int: ...","title":"Signature"},{"location":"src/cli/util/#get_choice_from_prompt","text":"Show source in util.py:32 Prompt the user with a question and a list of options, returning their choice. Additionally provides some input checking to ensure the selection is valid.","title":"get_choice_from_prompt"},{"location":"src/cli/util/#parameters_1","text":"prompt : str The prompt message, which should be descriptive. options : list[str] A list of strings that correspond with the selections available. The first element is always the default, which is accepted if the user immediately presses the return key. has_default : bool, optional Whether the first option should be accepted by default, defaults to True","title":"Parameters"},{"location":"src/cli/util/#returns_1","text":"int The choice, 0-indexed","title":"Returns"},{"location":"src/cli/util/#raises","text":"ValueError Only when the user provides an illegal option","title":"Raises"},{"location":"src/cli/util/#signature_1","text":"def get_choice_from_prompt(prompt: str, options: list[str], has_default=True) -> int: ...","title":"Signature"},{"location":"src/common/","text":"Common Wordle_bot Index / src / Common Auto-generated documentation for src.common module. Common Modules Modules Util","title":"Common"},{"location":"src/common/#common","text":"Wordle_bot Index / src / Common Auto-generated documentation for src.common module. Common Modules","title":"Common"},{"location":"src/common/#modules","text":"Util","title":"Modules"},{"location":"src/common/util/","text":"Util Wordle_bot Index / src / Common / Util Auto-generated documentation for src.common.util module. Util boolean_comprehension get_all_subclasses get_word_list prettify_guess prettify_guess_no_color boolean_comprehension Show source in util.py:26 Returns a list of 1s and 0s where 1 indicates the value is present in the list. Parameters list : str | list[str] | list[int] The list to check. value : str | int The value to check for in the list. Returns list[int] A list of 1s and 0s where 1 indicates the value is present. Signature def boolean_comprehension( list: str | list[str] | list[int], value: str | int ) -> list[int]: ... get_all_subclasses Show source in util.py:125 Generate a list of subclasses of clazz dynamically. Parameters clazz : type The base class. Returns list[type] A list of all subclasses of clazz Signature def get_all_subclasses(clazz: type): ... get_word_list Show source in util.py:47 Read a word list from a file and returns it as a list of uppercase words. The file is expected to be named \"wordle_word_list.txt\" and located in the same directory as this script. Parameters None Returns list[str] A list of words in uppercase. Signature def get_word_list() -> list[str]: ... prettify_guess Show source in util.py:69 Format a guess with ANSI color coding based on the result. Parameters guess : str The guessed word. result : list[int] A list of integers representing the result of the guess, where: - 0 indicates an incorrect letter, - 1 indicates a misplaced letter, - 2 indicates a correct letter. Returns str The formatted guess with color coding. Signature def prettify_guess(guess: str, result: list[int]) -> str: ... prettify_guess_no_color Show source in util.py:103 Format a guess without ANSI color coding based on the result. Parameters guess : str The guessed word. result : list[int] A list of integers representing the result of the guess, where: - 0 indicates an incorrect letter, - 1 indicates a misplaced letter, - 2 indicates a correct letter. Returns str The formatted guess without color coding. Signature def prettify_guess_no_color(guess: str, result: list[int]) -> str: ...","title":"Util"},{"location":"src/common/util/#util","text":"Wordle_bot Index / src / Common / Util Auto-generated documentation for src.common.util module. Util boolean_comprehension get_all_subclasses get_word_list prettify_guess prettify_guess_no_color","title":"Util"},{"location":"src/common/util/#boolean_comprehension","text":"Show source in util.py:26 Returns a list of 1s and 0s where 1 indicates the value is present in the list.","title":"boolean_comprehension"},{"location":"src/common/util/#parameters","text":"list : str | list[str] | list[int] The list to check. value : str | int The value to check for in the list.","title":"Parameters"},{"location":"src/common/util/#returns","text":"list[int] A list of 1s and 0s where 1 indicates the value is present.","title":"Returns"},{"location":"src/common/util/#signature","text":"def boolean_comprehension( list: str | list[str] | list[int], value: str | int ) -> list[int]: ...","title":"Signature"},{"location":"src/common/util/#get_all_subclasses","text":"Show source in util.py:125 Generate a list of subclasses of clazz dynamically.","title":"get_all_subclasses"},{"location":"src/common/util/#parameters_1","text":"clazz : type The base class.","title":"Parameters"},{"location":"src/common/util/#returns_1","text":"list[type] A list of all subclasses of clazz","title":"Returns"},{"location":"src/common/util/#signature_1","text":"def get_all_subclasses(clazz: type): ...","title":"Signature"},{"location":"src/common/util/#get_word_list","text":"Show source in util.py:47 Read a word list from a file and returns it as a list of uppercase words. The file is expected to be named \"wordle_word_list.txt\" and located in the same directory as this script.","title":"get_word_list"},{"location":"src/common/util/#parameters_2","text":"None","title":"Parameters"},{"location":"src/common/util/#returns_2","text":"list[str] A list of words in uppercase.","title":"Returns"},{"location":"src/common/util/#signature_2","text":"def get_word_list() -> list[str]: ...","title":"Signature"},{"location":"src/common/util/#prettify_guess","text":"Show source in util.py:69 Format a guess with ANSI color coding based on the result.","title":"prettify_guess"},{"location":"src/common/util/#parameters_3","text":"guess : str The guessed word. result : list[int] A list of integers representing the result of the guess, where: - 0 indicates an incorrect letter, - 1 indicates a misplaced letter, - 2 indicates a correct letter.","title":"Parameters"},{"location":"src/common/util/#returns_3","text":"str The formatted guess with color coding.","title":"Returns"},{"location":"src/common/util/#signature_3","text":"def prettify_guess(guess: str, result: list[int]) -> str: ...","title":"Signature"},{"location":"src/common/util/#prettify_guess_no_color","text":"Show source in util.py:103 Format a guess without ANSI color coding based on the result.","title":"prettify_guess_no_color"},{"location":"src/common/util/#parameters_4","text":"guess : str The guessed word. result : list[int] A list of integers representing the result of the guess, where: - 0 indicates an incorrect letter, - 1 indicates a misplaced letter, - 2 indicates a correct letter.","title":"Parameters"},{"location":"src/common/util/#returns_4","text":"str The formatted guess without color coding.","title":"Returns"},{"location":"src/common/util/#signature_4","text":"def prettify_guess_no_color(guess: str, result: list[int]) -> str: ...","title":"Signature"},{"location":"src/tester/","text":"Tester Wordle_bot Index / src / Tester Auto-generated documentation for src.tester module. Tester Modules Modules WordleTester","title":"Tester"},{"location":"src/tester/#tester","text":"Wordle_bot Index / src / Tester Auto-generated documentation for src.tester module. Tester Modules","title":"Tester"},{"location":"src/tester/#modules","text":"WordleTester","title":"Modules"},{"location":"src/tester/wordle_tester/","text":"WordleTester Wordle_bot Index / src / Tester / WordleTester Auto-generated documentation for src.tester.wordle_tester module. WordleTester WordleTester WordleTester().get_failure_str WordleTester().get_failures_str WordleTester().get_results_str WordleTester().get_wacky_failures_string WordleTester().test WordleTester Show source in wordle_tester.py:30 A class to test a Wordle bot against a list of words. It inherits from the Wordle class and provides methods to run tests, collect results, and analyze the performance of the bot. Attributes test_results : list[dict] A list to store the results of each test, including the word, result, and guesses. successes : list[str] A list to store the words that were guessed correctly by the bot. failures : list[str] A list to store the words that were not guessed correctly by the bot. logger : logging.Logger A logger instance for logging test events and errors. Signature class WordleTester(Wordle): def __init__(self) -> None: ... WordleTester().get_failure_str Show source in wordle_tester.py:179 Generate a formatted string for a single failure, including the word, the guesses made, and the results of those guesses. Parameters r : dict A dictionary containing the word, guesses, and results for a single test. color : bool, optional If True, the output will be formatted with colors for better readability. Defaults to True. Returns str A formatted string containing the details of the failure, including the word, guesses, and results. Signature def get_failure_str(self, r: dict, color: bool = True) -> str: ... WordleTester().get_failures_str Show source in wordle_tester.py:153 Generate a detailed string of the failures encountered during the tests. This includes the words that were not guessed correctly, the guesses made, and the results of those guesses. Parameters color : bool, optional If True, the output will be formatted with colors for better readability. Defaults to True. Returns str A formatted string containing details of the failures, including the words, guesses, and results. Signature def get_failures_str(self, color: bool = True) -> str: ... WordleTester().get_results_str Show source in wordle_tester.py:114 Generate a summary string of the test results, including the number of correct and incorrect guesses, success rates, and failure details. Returns str A formatted string summarizing the test results, including success and failure rates, average guesses per success, and details of incorrect guesses. Signature def get_results_str(self) -> str: ... WordleTester().get_wacky_failures_string Show source in wordle_tester.py:203 Generate a string containing details of failures that include misplaced letters. This method filters the test results to include only those where the last result contains misplaced letters, and formats the output accordingly. Parameters color : bool, optional If True, the output will be formatted with colors for better readability. Defaults to True. Returns str A formatted string containing details of failures with misplaced letters, including the words, guesses, and results. Signature def get_wacky_failures_string(self, color: bool = True) -> str: ... WordleTester().test Show source in wordle_tester.py:61 Runs tests on the bot using a predefined list of words. It iterates through each word in the word list, starts a new game, sets the secret word, and allows the bot to make guesses until the game is over. The results of each test are collected and stored in the test_results list. Parameters bot : BotBehaviors An instance of a bot that inherits from BotBehaviors. This bot will generate guesses and accept results based on the game's feedback. print_results : bool, optional If True, the results of the tests will be printed to the console. Defaults to True. print_failures : bool, optional If True, additionally prints out failed words in the style of Wordle. Defaults to False. Signature def test( self, bot: BotBehaviors, print_results: bool = True, print_failures=False ) -> None: ...","title":"WordleTester"},{"location":"src/tester/wordle_tester/#wordletester","text":"Wordle_bot Index / src / Tester / WordleTester Auto-generated documentation for src.tester.wordle_tester module. WordleTester WordleTester WordleTester().get_failure_str WordleTester().get_failures_str WordleTester().get_results_str WordleTester().get_wacky_failures_string WordleTester().test","title":"WordleTester"},{"location":"src/tester/wordle_tester/#wordletester_1","text":"Show source in wordle_tester.py:30 A class to test a Wordle bot against a list of words. It inherits from the Wordle class and provides methods to run tests, collect results, and analyze the performance of the bot.","title":"WordleTester"},{"location":"src/tester/wordle_tester/#attributes","text":"test_results : list[dict] A list to store the results of each test, including the word, result, and guesses. successes : list[str] A list to store the words that were guessed correctly by the bot. failures : list[str] A list to store the words that were not guessed correctly by the bot. logger : logging.Logger A logger instance for logging test events and errors.","title":"Attributes"},{"location":"src/tester/wordle_tester/#signature","text":"class WordleTester(Wordle): def __init__(self) -> None: ...","title":"Signature"},{"location":"src/tester/wordle_tester/#wordletesterget_failure_str","text":"Show source in wordle_tester.py:179 Generate a formatted string for a single failure, including the word, the guesses made, and the results of those guesses.","title":"WordleTester().get_failure_str"},{"location":"src/tester/wordle_tester/#parameters","text":"r : dict A dictionary containing the word, guesses, and results for a single test. color : bool, optional If True, the output will be formatted with colors for better readability. Defaults to True.","title":"Parameters"},{"location":"src/tester/wordle_tester/#returns","text":"str A formatted string containing the details of the failure, including the word, guesses, and results.","title":"Returns"},{"location":"src/tester/wordle_tester/#signature_1","text":"def get_failure_str(self, r: dict, color: bool = True) -> str: ...","title":"Signature"},{"location":"src/tester/wordle_tester/#wordletesterget_failures_str","text":"Show source in wordle_tester.py:153 Generate a detailed string of the failures encountered during the tests. This includes the words that were not guessed correctly, the guesses made, and the results of those guesses.","title":"WordleTester().get_failures_str"},{"location":"src/tester/wordle_tester/#parameters_1","text":"color : bool, optional If True, the output will be formatted with colors for better readability. Defaults to True.","title":"Parameters"},{"location":"src/tester/wordle_tester/#returns_1","text":"str A formatted string containing details of the failures, including the words, guesses, and results.","title":"Returns"},{"location":"src/tester/wordle_tester/#signature_2","text":"def get_failures_str(self, color: bool = True) -> str: ...","title":"Signature"},{"location":"src/tester/wordle_tester/#wordletesterget_results_str","text":"Show source in wordle_tester.py:114 Generate a summary string of the test results, including the number of correct and incorrect guesses, success rates, and failure details.","title":"WordleTester().get_results_str"},{"location":"src/tester/wordle_tester/#returns_2","text":"str A formatted string summarizing the test results, including success and failure rates, average guesses per success, and details of incorrect guesses.","title":"Returns"},{"location":"src/tester/wordle_tester/#signature_3","text":"def get_results_str(self) -> str: ...","title":"Signature"},{"location":"src/tester/wordle_tester/#wordletesterget_wacky_failures_string","text":"Show source in wordle_tester.py:203 Generate a string containing details of failures that include misplaced letters. This method filters the test results to include only those where the last result contains misplaced letters, and formats the output accordingly.","title":"WordleTester().get_wacky_failures_string"},{"location":"src/tester/wordle_tester/#parameters_2","text":"color : bool, optional If True, the output will be formatted with colors for better readability. Defaults to True.","title":"Parameters"},{"location":"src/tester/wordle_tester/#returns_3","text":"str A formatted string containing details of failures with misplaced letters, including the words, guesses, and results.","title":"Returns"},{"location":"src/tester/wordle_tester/#signature_4","text":"def get_wacky_failures_string(self, color: bool = True) -> str: ...","title":"Signature"},{"location":"src/tester/wordle_tester/#wordletestertest","text":"Show source in wordle_tester.py:61 Runs tests on the bot using a predefined list of words. It iterates through each word in the word list, starts a new game, sets the secret word, and allows the bot to make guesses until the game is over. The results of each test are collected and stored in the test_results list.","title":"WordleTester().test"},{"location":"src/tester/wordle_tester/#parameters_3","text":"bot : BotBehaviors An instance of a bot that inherits from BotBehaviors. This bot will generate guesses and accept results based on the game's feedback. print_results : bool, optional If True, the results of the tests will be printed to the console. Defaults to True. print_failures : bool, optional If True, additionally prints out failed words in the style of Wordle. Defaults to False.","title":"Parameters"},{"location":"src/tester/wordle_tester/#signature_5","text":"def test( self, bot: BotBehaviors, print_results: bool = True, print_failures=False ) -> None: ...","title":"Signature"},{"location":"src/wordle/","text":"Wordle Wordle_bot Index / src / Wordle Auto-generated documentation for src.wordle module. Wordle Modules Modules Wordle","title":"Wordle"},{"location":"src/wordle/#wordle","text":"Wordle_bot Index / src / Wordle Auto-generated documentation for src.wordle module. Wordle Modules","title":"Wordle"},{"location":"src/wordle/#modules","text":"Wordle","title":"Modules"},{"location":"src/wordle/wordle/","text":"Wordle Wordle_bot Index / src / Wordle / Wordle Auto-generated documentation for src.wordle.wordle module. Wordle Wordle Wordle().check_error_conditions Wordle().generate_word Wordle().get_all_indices Wordle().guess Wordle().is_misplaced_letter Wordle().start_game Wordle Show source in wordle.py:27 A class representing a Wordle game. It manages the game state, including the secret word, guesses, and results. It provides methods to start the game, make guesses, and check for errors. Attributes turns_taken : int The number of turns taken in the current game. game_in_progress : bool Indicates whether a game is currently in progress. guesses : list[str] A list of words guessed by the player. results : list[list[int]] A list of results corresponding to each guess, where each result is a list of integers representing the status of each letter in the guess (correct, misplaced, or incorrect). word_list : list[str] A list of valid words that can be used in the game. logger : logging.Logger A logger instance for logging game events and errors. Methods generate_word() -> str Generate a random word from the word list to be used as the secret word for the game get_all_indices(list: list[int]) -> list[int] Returns a list of indices where the value is 1 in the given list. is_misplaced_letter(letter: str, word: str, result: list[int], index: int) -> bool Check if a letter in the guessed word is misplaced compared to the secret word. check_error_conditions(word: str) -> dict Check for error conditions before making a guess and returns a dictionary with the result and message. guess(word: str) -> dict Process a guess, updates the game state, and returns the result of the guess. start_game() -> None Initialize a new game by selecting a secret word and resetting the game state. Signature class Wordle: def __init__(self) -> None: ... Wordle().check_error_conditions Show source in wordle.py:165 Check for error conditions before making a guess. This method verifies if the game is in progress and if the guessed word is valid. Parameters word : str The word to be guessed. Returns dict A dictionary containing the result and a message. If there are no errors, the result is None and the message is None. If there are errors, the result is None and the message describes the error. Signature def check_error_conditions(self, word: str) -> dict: ... Wordle().generate_word Show source in wordle.py:87 Select a random word from the word list to be used as the secret word for the game. Parameters None Returns str A randomly selected word from the word list. Signature def generate_word(self) -> str: ... Wordle().get_all_indices Show source in wordle.py:102 Returns a list of indices where the value is 1 in the given list. This is used to find the positions of correct letters in the result list. Parameters list : list[int] A list of integers where 1 indicates the presence of a correct letter. Returns list[int] A list of indices where the value is 1 in the input list. Signature def get_all_indices(self, list: list[int]) -> list[int]: ... Wordle().guess Show source in wordle.py:191 Process a guess, updates the game state, and returns the result of the guess. This method checks for error conditions, compares the guessed word with the secret word, and updates the results accordingly. It also checks if the player has won or lost the game. Parameters word : str The word guessed by the player. Returns dict A dictionary containing the result of the guess and a message. If the guess is valid, the result is a list indicating the status of each letter (correct, misplaced, or incorrect). If the player wins, the message indicates a win. If the player loses, the message indicates a loss. If there are errors, the result is None and the message describes the error. Signature def guess(self, word: str) -> dict: ... Wordle().is_misplaced_letter Show source in wordle.py:120 Check if a letter in the guessed word is misplaced compared to the secret word. A letter is considered misplaced if it exists in the secret word but is not in the correct position and the number of occurrences in the secret word is greater than or equal to the number of occurrences in the guessed word up to the current index. Parameters letter : str The letter to check for being misplaced. word : str The guessed word. result : list[int] The result of the previous guesses, where each element indicates the status of each letter (correct or incorrect). index : int The current index in the guessed word being checked. Returns bool True if the letter is misplaced, False otherwise. Signature def is_misplaced_letter( self, letter: str, word: str, result: list[int], index: int ) -> bool: ... Wordle().start_game Show source in wordle.py:247 Initialize a new game by selecting a secret word and resetting the game state. This method sets the secret word to a randomly generated word from the word list, resets the game in progress flag to True, and clears the guesses and results lists. Parameters None Returns None Signature def start_game(self) -> None: ...","title":"Wordle"},{"location":"src/wordle/wordle/#wordle","text":"Wordle_bot Index / src / Wordle / Wordle Auto-generated documentation for src.wordle.wordle module. Wordle Wordle Wordle().check_error_conditions Wordle().generate_word Wordle().get_all_indices Wordle().guess Wordle().is_misplaced_letter Wordle().start_game","title":"Wordle"},{"location":"src/wordle/wordle/#wordle_1","text":"Show source in wordle.py:27 A class representing a Wordle game. It manages the game state, including the secret word, guesses, and results. It provides methods to start the game, make guesses, and check for errors.","title":"Wordle"},{"location":"src/wordle/wordle/#attributes","text":"turns_taken : int The number of turns taken in the current game. game_in_progress : bool Indicates whether a game is currently in progress. guesses : list[str] A list of words guessed by the player. results : list[list[int]] A list of results corresponding to each guess, where each result is a list of integers representing the status of each letter in the guess (correct, misplaced, or incorrect). word_list : list[str] A list of valid words that can be used in the game. logger : logging.Logger A logger instance for logging game events and errors.","title":"Attributes"},{"location":"src/wordle/wordle/#methods","text":"generate_word() -> str Generate a random word from the word list to be used as the secret word for the game get_all_indices(list: list[int]) -> list[int] Returns a list of indices where the value is 1 in the given list. is_misplaced_letter(letter: str, word: str, result: list[int], index: int) -> bool Check if a letter in the guessed word is misplaced compared to the secret word. check_error_conditions(word: str) -> dict Check for error conditions before making a guess and returns a dictionary with the result and message. guess(word: str) -> dict Process a guess, updates the game state, and returns the result of the guess. start_game() -> None Initialize a new game by selecting a secret word and resetting the game state.","title":"Methods"},{"location":"src/wordle/wordle/#signature","text":"class Wordle: def __init__(self) -> None: ...","title":"Signature"},{"location":"src/wordle/wordle/#wordlecheck_error_conditions","text":"Show source in wordle.py:165 Check for error conditions before making a guess. This method verifies if the game is in progress and if the guessed word is valid.","title":"Wordle().check_error_conditions"},{"location":"src/wordle/wordle/#parameters","text":"word : str The word to be guessed.","title":"Parameters"},{"location":"src/wordle/wordle/#returns","text":"dict A dictionary containing the result and a message. If there are no errors, the result is None and the message is None. If there are errors, the result is None and the message describes the error.","title":"Returns"},{"location":"src/wordle/wordle/#signature_1","text":"def check_error_conditions(self, word: str) -> dict: ...","title":"Signature"},{"location":"src/wordle/wordle/#wordlegenerate_word","text":"Show source in wordle.py:87 Select a random word from the word list to be used as the secret word for the game.","title":"Wordle().generate_word"},{"location":"src/wordle/wordle/#parameters_1","text":"None","title":"Parameters"},{"location":"src/wordle/wordle/#returns_1","text":"str A randomly selected word from the word list.","title":"Returns"},{"location":"src/wordle/wordle/#signature_2","text":"def generate_word(self) -> str: ...","title":"Signature"},{"location":"src/wordle/wordle/#wordleget_all_indices","text":"Show source in wordle.py:102 Returns a list of indices where the value is 1 in the given list. This is used to find the positions of correct letters in the result list.","title":"Wordle().get_all_indices"},{"location":"src/wordle/wordle/#parameters_2","text":"list : list[int] A list of integers where 1 indicates the presence of a correct letter.","title":"Parameters"},{"location":"src/wordle/wordle/#returns_2","text":"list[int] A list of indices where the value is 1 in the input list.","title":"Returns"},{"location":"src/wordle/wordle/#signature_3","text":"def get_all_indices(self, list: list[int]) -> list[int]: ...","title":"Signature"},{"location":"src/wordle/wordle/#wordleguess","text":"Show source in wordle.py:191 Process a guess, updates the game state, and returns the result of the guess. This method checks for error conditions, compares the guessed word with the secret word, and updates the results accordingly. It also checks if the player has won or lost the game.","title":"Wordle().guess"},{"location":"src/wordle/wordle/#parameters_3","text":"word : str The word guessed by the player.","title":"Parameters"},{"location":"src/wordle/wordle/#returns_3","text":"dict A dictionary containing the result of the guess and a message. If the guess is valid, the result is a list indicating the status of each letter (correct, misplaced, or incorrect). If the player wins, the message indicates a win. If the player loses, the message indicates a loss. If there are errors, the result is None and the message describes the error.","title":"Returns"},{"location":"src/wordle/wordle/#signature_4","text":"def guess(self, word: str) -> dict: ...","title":"Signature"},{"location":"src/wordle/wordle/#wordleis_misplaced_letter","text":"Show source in wordle.py:120 Check if a letter in the guessed word is misplaced compared to the secret word. A letter is considered misplaced if it exists in the secret word but is not in the correct position and the number of occurrences in the secret word is greater than or equal to the number of occurrences in the guessed word up to the current index.","title":"Wordle().is_misplaced_letter"},{"location":"src/wordle/wordle/#parameters_4","text":"letter : str The letter to check for being misplaced. word : str The guessed word. result : list[int] The result of the previous guesses, where each element indicates the status of each letter (correct or incorrect). index : int The current index in the guessed word being checked.","title":"Parameters"},{"location":"src/wordle/wordle/#returns_4","text":"bool True if the letter is misplaced, False otherwise.","title":"Returns"},{"location":"src/wordle/wordle/#signature_5","text":"def is_misplaced_letter( self, letter: str, word: str, result: list[int], index: int ) -> bool: ...","title":"Signature"},{"location":"src/wordle/wordle/#wordlestart_game","text":"Show source in wordle.py:247 Initialize a new game by selecting a secret word and resetting the game state. This method sets the secret word to a randomly generated word from the word list, resets the game in progress flag to True, and clears the guesses and results lists.","title":"Wordle().start_game"},{"location":"src/wordle/wordle/#parameters_5","text":"None","title":"Parameters"},{"location":"src/wordle/wordle/#returns_5","text":"None","title":"Returns"},{"location":"src/wordle/wordle/#signature_6","text":"def start_game(self) -> None: ...","title":"Signature"}]}